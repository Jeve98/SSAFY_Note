"""
[251027]

<AI 라이브 강의>

AI Agent : AI를 사용해 목표를 추구하는 SW 시스템
- 계획 실행 결정을 통해 인간 개입 없이 자율적 문제 해결
※ Agent : 다른 사람, 단체를 대신하여 행동하는 개인 또는 단체
    1. Perception AI : 현대 기계학습 기반 특화된 분야에서 해석 및 분석
    2. Generative AI : 콘텐츠 제작
    3. Agentic AI : 능동적 작업 수행을 기반으로 한 자율형 문제 해결 시스템
        - 자율성, 도구, 학습/적응, 추론/계획, 기억, 인식
    4. Physical AI : 물리적 실체를 얻어 현실 세계에서 작동


Multi Agent System : 집단지성 아이디어를 차용하여 AI Agent의 성능을 향상시키는 방법 (최대 capacity 증가)
- 에이전트 : 역할, 능력, 행동, 지식 모델을 가진 핵심 행위자

- 환경 : 에이전트가 존재하고 인식 및 행동할 수 있는 외부 세계

- 상호작용 : 표준화된 통신 언어를 사용한 에이전트 간 소통
    - 경쟁 : 각자의 개별 목표를 우선하며 이를 다른 에이전트의 목표와 충돌, 대립할 수 있도록 설계하여 고도의 추론 능력 및 창의적인 문제해결 방법을 개발하도록 촉진하는 방법으로 시스템의 적응력이 높아지나 강력한 프롬프트의 단일 에이전트보다 속도가 느리거나 무한 순환 논쟁이 발생할 수 있음
    - 협력 : 각각의 개별 목표를 공동의 집단 목표와 일치시켜 상호 이익이 되는 결과를 달성하기 위해 동작하는 방법으로, 각 전문 분야에서 특정 세부 작업에 집중할 수 있으나 빈번한 통신과 복잡성이 증가하며 개별 에이전트의 신뢰성 및 성능에 크게 의존하고 하나의 에이전트 오류가 시스템 전체에 영향을 끼침
    - 경쟁 + 협력 : 협력과 경쟁의 전략적 조합으로 공동 목표 달성을 위해 특정 작업은 협력하며 다른 작업은 경쟁하도록 구성
        ex) MOE(Mixture Of Experts) : 전문가 혼합 모델
    
    - 협업 전략
        * 규칙 기반 프로토콜 : 사전에 정의된 규칙 혹은 인간의 협력 방식을 모방하여 개별 동작을 구성하는 방법으로 구현 및 디버깅에 용이
        * 역할 기반 프로토콜 : 사전에 정의된 역할 혹은 주로 도메인 지식을 기반으로 개별 동작을 구성하는 방법으로 도메인에 대한 재활용에 용이
    
    - 커뮤니케이션 구조
        * 중앙집중형 구조 : 참여자/서비스제공자 구조를 기반으로 중앙 에이전트가 소통, 협력을 관리/제어/조율하며 최종 의사결정을 확정하는 방법으로 안정적이지만 병목 현상 발생 혹은 중앙 에이전트에 문제가 발생한 경우, single-failure point로 작용할 수 있음
        * 탈중앙화 구조 : 에이전트에 대한 통제 및 의사결정을 분산시킨 방법으로 일부 에이전트의 실패에도 시스템 동작이 가능하고 높은 확장성을 제공
    
    >> 확장성, 최적 협업 전략, 적응 가능한 역할 및 협업 경로 할당에 대한 고려가 필요

- 조직 : 계층 구조의 관리 혹은 자발적인 행동으로 조직


- Memory & Tool [기억/지식]
※ 행동/능동성, 학습/적용
    - RAG : LLM 내장 매개변수 메모리의 한계 봉착과 낡은 지식, 환각 현상, 사적 정보 접근 불가 문제를 검색을 통해 해결
        -> 일반적으로 1회성 검색으로 인해 해당 정보에 대한 품질 보증이 불가
        
    - (멀티)에이전트형 RAG : 능동적으로 지식을 습득하는 개체로 발전
        * Toolformer : LM이 스스로 도구 사용법을 학습하는 방법으로 self-supervised learning을 기반으로 새로운 맥락에 API 호출을 삽입하며 발전
        * ReTool : LLM의 전략적 도구 사용을 위한 강화 학습 방법
        * Search-R1 : Web 검색을 위한 강화 학습 방법

        * A2A(Agent-To-Agent) 프로토콜 : 다수의 AI Agent가 내부 메모리, 사고, 도구를 직접 공유하지 않고 맥락, 작업 업데이트, 지시사항, 데이터만 교환하여 협업할 수 있도록 지원하는 프로토콜로 에이전트 간의 협업을 지원
            - 에이전트 서버 : 개별 에이전트를 호스팅
            - 클라이언트 에이전트 : 여러 에이전트 서버로 연결
            - 라우터 : 쿼리를 적절한 에이전트로 전달

            
- 추론 능력
    - Few/Zero-Shot
    - 자기 일관성 : 다양한 추론 과정을 생성하고 그 중 가장 일관성 있는 답변을 고르는 디코딩 방식
    - Tree of Thought : BFS/DFS 방식으로 다양한 생각을 생성하고 평가
    
    [Test-Time Scaling] : 추론/검색 단계의 수를 늘려 성능을 향상시키는 방법
    - 연산량 증대 : 투입한 컴퓨팅 자원과 성능 간의 양의 상관관계 발견
        ex) DeepSeek-R1, o1, Gemini, GPT, ...
    - 정확성과 올바른 형식에 대한 강화학습 시행을 통한 chain-of-thought 학습
        -> 여전히 과도한 리소스 사용이 문제

    - 모델 기반 접근 : 첫 번째로 생성된 토큰을 제어 토큰으로 하여, <short/think>로 구분지어 추론 길이를 제어하는 방식
    - 추론 결과 기반 접근 : 일부 추론 과정을 만든 후, 지금까지의 생각을 요약하는 방식
    - 입력 프롬프트 기반 접근 : 쉬운 질문에는 연산량을 적게, 복잡한 질문에는 많이 배정하는 방식


- Planning
    - ReAct : 추론, 행동만 하는 것이 아니라 이들을 함께 생성하는 방식
    - HuggingGPT : 계획 수립을 담당하는 LLM이 복잡한 작업을 나누어 각각의 전문 모델들에게 분배하는 시스템
    - Plan and Act : 계획 에이전트는 거시적인 계획을 생성하고 실행 에이전트가 이를 기반으로 하위 단계를 실행

        
<실습>


"""